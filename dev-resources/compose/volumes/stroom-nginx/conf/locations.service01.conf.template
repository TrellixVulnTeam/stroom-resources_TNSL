location /service01/ {
  # Handing off to auth. See:
  # https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
  auth_request /can_manage_users;
  auth_request_set $auth_status $upstream_status;

  # We need to enable web sockets for reverse proxying. See:
  # http://nginx.org/en/docs/http/websocket.html
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";

  include location_defaults.conf;
  # The root of the application must match the root shown below
  proxy_pass http://service01_upstream/service01/;
}


location = /can_manage_users {
  # Standard directives for auth subrequest. See:
  # https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
  internal;
  proxy_pass               http://192.168.1.13:8080/api/authorisation/v1/hasPermission/CAN_MANAGE_USERS;
  #proxy_pass               http://stroom_upstream_sticky/api/authorisation/v1/fake-auth;
 # proxy_pass                 http://192.168.1.13:8080/api/authorisation/v1/noauth/fake-auth;
  proxy_pass_request_body    off; 
  proxy_set_header           Content-Length "";

  # These are most of our standard reverse proxy directives.
  # We can't use the usual include because proxy_pass_request_body clashes.
  proxy_ssl_server_name      on;
  proxy_pass_request_headers on;
  # proxy_pass_request_body    on; 
  proxy_pass_header          Set-Cookie;
  proxy_set_header           X-Original-URI $request_uri; 
  proxy_set_header           X-Forwarded-For   $proxy_add_x_forwarded_for;
  proxy_set_header           X-SSL-CLIENT-S-DN $ssl_client_s_dn;
}